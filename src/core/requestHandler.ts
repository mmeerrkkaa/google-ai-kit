import fetch, { RequestInit, Response } from 'node-fetch';
import OriginalFormData from 'form-data';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { GeminiClientConfig, DEFAULT_GEMINI_CONFIG, ProxyConfig } from './config';
import { APIKeyError, NetworkError, handleErrorResponse, GoogleAIError, ConsumerSuspendedError, RateLimitError, APIKeyExpiredError, APIKeyInvalidError } from './errors';
import { Readable } from 'stream';

export class RequestHandler {
  private config: Required<Omit<GeminiClientConfig, 'proxy' | 'defaultModel' | 'debugMode'>> & { proxy?: ProxyConfig, defaultModel?: string, debugMode?: boolean };
  private currentApiKeyIndex: number = 0;
  private proxyAgent?: HttpsProxyAgent<string>;
  private dailyQuotaExhaustedKeys: Set<number> = new Set(); // –ò–Ω–¥–µ–∫—Å—ã –∫–ª—é—á–µ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π –∫–≤–æ—Ç–æ–π

  constructor(config: GeminiClientConfig) {
    if (!config.apiKeys || config.apiKeys.length === 0) {
      throw new APIKeyError("At least one API key must be provided.");
    }
    this.config = { 
        ...DEFAULT_GEMINI_CONFIG, 
        ...config 
    } as Required<Omit<GeminiClientConfig, 'proxy' | 'defaultModel'>> & { proxy?: ProxyConfig, defaultModel?: string };


    if (this.config.proxy) {
      const pc = this.config.proxy;
      const protocol = pc.protocol || 'http';
      let auth = '';
      if (pc.user) {
        auth = `${pc.user}${pc.pass ? ':' + pc.pass : ''}@`;
      }
      const proxyString = `${protocol}://${auth}${pc.host}:${pc.port}`;
      this.proxyAgent = new HttpsProxyAgent(proxyString);
    }
  }

  private getCurrentApiKey(): string {
    return this.config.apiKeys[this.currentApiKeyIndex];
  }

  private switchToNextApiKey(): void {
    this.currentApiKeyIndex = (this.currentApiKeyIndex + 1) % this.config.apiKeys.length;
  }

  private getAvailableKeysCount(): number {
    return this.config.apiKeys.length - this.dailyQuotaExhaustedKeys.size;
  }

  private markKeyAsExhausted(keyIndex: number): void {
    this.dailyQuotaExhaustedKeys.add(keyIndex);
    console.error(`üö´ API –∫–ª—é—á #${keyIndex + 1} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–≤—à–∏–π –¥–Ω–µ–≤–Ω—É—é –∫–≤–æ—Ç—É (–Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ 00:00 UTC)`);
  }

  private isKeyAvailable(keyIndex: number): boolean {
    return !this.dailyQuotaExhaustedKeys.has(keyIndex);
  }

  public async request<TResponse>(
    method: 'GET' | 'POST' | 'DELETE',
    path: string,
    body?: any,
    isStream: boolean = false,
    isFileUpload: boolean = false
  ): Promise<TResponse | ReadableStream<Uint8Array>> {
    let attempts = 0;
    const maxRetries = this.config.maxRetries!;
    let apiKeyAttempts = 0;
    const maxApiKeyAttempts = this.config.apiKeys.length;
    let consecutiveRateLimitErrors = 0; // –°—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö RateLimitError

    while (true) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
      const availableKeysCount = this.getAvailableKeysCount();
      if (availableKeysCount === 0) {
        throw new RateLimitError(`–í—Å–µ ${this.config.apiKeys.length} API –∫–ª—é—á–µ–π –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω—É—é –∫–≤–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ 00:00 UTC.`);
      }

      const currentKeyIndex = this.currentApiKeyIndex;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á–∏ —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π –∫–≤–æ—Ç–æ–π
      if (!this.isKeyAvailable(currentKeyIndex)) {
        if (this.config.debugMode) {
          console.log(`[DEBUG] –ü—Ä–æ–ø—É—Å–∫ –∫–ª—é—á–∞ #${currentKeyIndex + 1} (–¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)`);
        }
        this.switchToNextApiKey();
        continue;
      }

      const apiKey = this.getCurrentApiKey();

      if (this.config.debugMode) {
        const keyPreview = apiKey.substring(0, 10) + '...';
        console.log(`[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á #${currentKeyIndex + 1}: ${keyPreview} (–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π: ${availableKeysCount}/${this.config.apiKeys.length})`);
      }

      const headers: Record<string, string> = {
        'X-Goog-Api-Key': apiKey,
      };
      
      if (body && !(body instanceof OriginalFormData) && !isFileUpload) {
        headers['Content-Type'] = 'application/json';
      }

      const finalRequestUrl = path.startsWith('http') ? path : `${this.config.apiEndpoint}/${this.config.apiVersion}/${path}`;

      const requestOptions: RequestInit = {
        method,
        headers,
        agent: this.proxyAgent,
        timeout: this.config.requestTimeout,
      };

      if (body) {
        if (body instanceof OriginalFormData) {
            requestOptions.body = body as any;
        } else if (!isFileUpload) {
            requestOptions.body = JSON.stringify(body);
        } else {
            requestOptions.body = body; 
        }
      }

      try {
        const response: Response = await fetch(finalRequestUrl, requestOptions);

        if (isStream && response.ok) {
            if (!response.body) {
                throw new NetworkError("Stream response body is null despite response.ok being true.");
            }
            const nodeJsStream = response.body as unknown as Readable;
            if (typeof Readable.toWeb === 'function') {
                 return Readable.toWeb(nodeJsStream) as ReadableStream<Uint8Array>;
            } else {
                throw new Error("Readable.toWeb is not available. Node.js 18+ is required for this streaming method with node-fetch v2.");
            }
        }

        if (!response.ok) {
          let errorData;
          try {
            errorData = await response.json();
          } catch (e) {
            errorData = { error: { message: await response.text() || response.statusText || `HTTP error ${response.status}` } };
          }
          
          const apiError = handleErrorResponse(response, errorData);

          // API Key Expired - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
          if (apiError instanceof APIKeyExpiredError && apiKeyAttempts < maxApiKeyAttempts - 1) {
            apiKeyAttempts++;
            const expiredKeyPreview = apiKey.substring(0, 10) + '...';
            this.switchToNextApiKey();
            const nextKeyPreview = this.getCurrentApiKey().substring(0, 10) + '...';
            const message = `‚ùå API –∫–ª—é—á ${expiredKeyPreview} (–∫–ª—é—á #${currentKeyIndex + 1}) –∏—Å—Ç—ë–∫, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∫–ª—é—á #${this.currentApiKeyIndex + 1} (–ø–æ–ø—ã—Ç–∫–∞ ${apiKeyAttempts}/${maxApiKeyAttempts})`;
            console.error(`[API KEY EXPIRED] ${message}`);
            if (this.config.debugMode) {
              console.log(`[DEBUG] –ü—Ä–∏—á–∏–Ω–∞: ${apiError.message}`);
              console.log(`[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á: #${this.currentApiKeyIndex + 1}: ${nextKeyPreview}`);
            }
            continue;
          }

          // API Key Invalid - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
          if (apiError instanceof APIKeyInvalidError && apiKeyAttempts < maxApiKeyAttempts - 1) {
            apiKeyAttempts++;
            const invalidKeyPreview = apiKey.substring(0, 10) + '...';
            this.switchToNextApiKey();
            const nextKeyPreview = this.getCurrentApiKey().substring(0, 10) + '...';
            const message = `‚ùå API –∫–ª—é—á ${invalidKeyPreview} (–∫–ª—é—á #${currentKeyIndex + 1}) –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∫–ª—é—á #${this.currentApiKeyIndex + 1} (–ø–æ–ø—ã—Ç–∫–∞ ${apiKeyAttempts}/${maxApiKeyAttempts})`;
            console.error(`[API KEY INVALID] ${message}`);
            if (this.config.debugMode) {
              console.log(`[DEBUG] –ü—Ä–∏—á–∏–Ω–∞: ${apiError.message}`);
              console.log(`[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á: #${this.currentApiKeyIndex + 1}: ${nextKeyPreview}`);
            }
            continue;
          }

          // Consumer Suspended
          if (apiError instanceof ConsumerSuspendedError && apiKeyAttempts < maxApiKeyAttempts - 1) {
            apiKeyAttempts++;
            const suspendedKeyPreview = apiKey.substring(0, 10) + '...';
            this.switchToNextApiKey();
            const nextKeyPreview = this.getCurrentApiKey().substring(0, 10) + '...';
            const message = `API –∫–ª—é—á ${suspendedKeyPreview} (–∫–ª—é—á #${currentKeyIndex + 1}) –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∫–ª—é—á #${this.currentApiKeyIndex + 1} (–ø–æ–ø—ã—Ç–∫–∞ ${apiKeyAttempts}/${maxApiKeyAttempts})`;
            console.warn(`[–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ö–õ–Æ–ß–ê] ${message}`);
            if (this.config.debugMode) {
              console.log(`[DEBUG] –ü—Ä–∏—á–∏–Ω–∞: ConsumerSuspendedError - ${apiError.message}`);
              console.log(`[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á: #${this.currentApiKeyIndex + 1}: ${nextKeyPreview}`);
            }
            continue;
          }

          // Rate Limit Error
          if (apiError instanceof RateLimitError) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ (3–ú —Ç–æ–∫–µ–Ω–æ–≤) –∏–ª–∏ –º–∏–Ω—É—Ç–Ω–∞—è (2 RPM)
            const isDailyQuota = apiError.message.includes('free_tier_input_token_count') ||
                                apiError.message.includes('free_tier_output_token_count');

            if (isDailyQuota) {
              // –î–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ - –ø–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
              this.markKeyAsExhausted(currentKeyIndex);
              const availableKeys = this.getAvailableKeysCount();

              console.error(`üíÄ API –∫–ª—é—á #${currentKeyIndex + 1} –∏—Å—á–µ—Ä–ø–∞–ª –î–ù–ï–í–ù–£–Æ –∫–≤–æ—Ç—É (–¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: ${availableKeys}/${this.config.apiKeys.length})`);

              if (availableKeys === 0) {
                // –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω—É—é –∫–≤–æ—Ç—É
                throw new RateLimitError(`–í—Å–µ ${this.config.apiKeys.length} API –∫–ª—é—á–µ–π –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω—É—é –∫–≤–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ 00:00 UTC.`);
              }

              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
              this.switchToNextApiKey();
              continue;
            }

            // –ú–∏–Ω—É—Ç–Ω–∞—è –∫–≤–æ—Ç–∞ (RPM) - –º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            consecutiveRateLimitErrors++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –î–û–°–¢–£–ü–ù–´–ï –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –º–∏–Ω—É—Ç–Ω—É—é –∫–≤–æ—Ç—É
            const availableKeys = this.getAvailableKeysCount();
            if (consecutiveRateLimitErrors >= availableKeys) {
              // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –º–∏–Ω—É—Ç–Ω—É—é –∫–≤–æ—Ç—É - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              console.error(`‚ö†Ô∏è –í–°–ï ${availableKeys} –î–û–°–¢–£–ü–ù–´–• API –ö–õ–Æ–ß–ï–ô –ò–°–ß–ï–†–ü–ê–õ–ò –ú–ò–ù–£–¢–ù–£–Æ –ö–í–û–¢–£!`);

              // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è retry –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
              const retryMatch = apiError.message.match(/retry in ([\d.]+)s/i);
              let waitTime = 65000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 65 —Å–µ–∫—É–Ω–¥ (–∫–≤–æ—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)

              if (retryMatch) {
                waitTime = Math.ceil(parseFloat(retryMatch[1]) * 1000) + 5000; // +5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∞—Å
              }

              console.warn(`[–û–ñ–ò–î–ê–ù–ò–ï] –ñ–¥—ë–º ${Math.ceil(waitTime / 1000)} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–Ω—É—Ç–Ω—ã—Ö –∫–≤–æ—Ç...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));

              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
              consecutiveRateLimitErrors = 0;
              apiKeyAttempts = 0;
              console.log(`[–í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–Ω—É—Ç–Ω—ã—Ö –∫–≤–æ—Ç...`);
              continue;
            }

            // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
            if (apiKeyAttempts < maxApiKeyAttempts - 1) {
              apiKeyAttempts++;
              const rateLimitedKeyPreview = apiKey.substring(0, 10) + '...';
              this.switchToNextApiKey();
              const message = `API –∫–ª—é—á ${rateLimitedKeyPreview} (–∫–ª—é—á #${currentKeyIndex + 1}) –ø—Ä–µ–≤—ã—Å–∏–ª –º–∏–Ω—É—Ç–Ω—É—é –∫–≤–æ—Ç—É, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∫–ª—é—á #${this.currentApiKeyIndex + 1} (–ø–æ–ø—ã—Ç–∫–∞ ${apiKeyAttempts}/${maxApiKeyAttempts})`;
              console.warn(`[–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ö–õ–Æ–ß–ê] ${message}`);
              if (this.config.debugMode) {
                console.log(`[DEBUG] –ü—Ä–∏—á–∏–Ω–∞: RateLimitError (–º–∏–Ω—É—Ç–Ω–∞—è) - ${apiError.message}`);
                console.log(`[DEBUG] –ü–æ–¥—Ä—è–¥ RateLimitError: ${consecutiveRateLimitErrors}/${availableKeys}`);
              }
              continue;
            }
          }

          if (
            (response.status >= 500 || response.status === 429) &&
            attempts < maxRetries
          ) {
            attempts++;
            const delay = Math.pow(2, attempts) * 1000 + Math.random() * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          }
          throw apiError;
        }
        
        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ RateLimitError
        consecutiveRateLimitErrors = 0;

        if (response.status === 204) {
            return {} as TResponse;
        }

        return (await response.json()) as TResponse;

      } catch (error) {
        if (error instanceof GoogleAIError) {
            throw error; 
        }

        if (attempts < maxRetries) {
          attempts++;
          const delay = Math.pow(2, attempts) * 1000 + Math.random() * 1000;
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        
        if (error instanceof Error && (error.name === 'AbortError' || (error as any).type === 'request-timeout')) {
            throw new NetworkError(`Request timed out after ${this.config.requestTimeout}ms for ${finalRequestUrl}`);
        }
        throw new NetworkError(`Request failed for ${finalRequestUrl}: ${(error as Error).message}`);
      }
    }
  }
}